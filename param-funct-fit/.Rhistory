larva.dev <- function(t){
larva <- ifelse(t <= 10 | t >= 40, 0.01, 0.16231*exp(-(t-27.18118)^2/109.03255))
return(larva)
}
data <- data.frame(t, larva.dev(t))
plot(t, larva.dev(t))
plot(t, larva.dev(t), "l")
t <- seq(0, 50)
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))}
larva.dev <- function(t){
larva <- ifelse(t <= 10 | t >= 40, 0.01, 0.16231*exp(-(t-27.18118)^2/109.03255))
return(larva)
}
data <- data.frame(t, larva.dev(t))
plot(t, larva.dev(t), "l")
t <- seq(0, 50)
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))}
larva.dev <- function(t){
larva <- ifelse(temp(t) <= 10 | temp(t) >= 40, 0.01, 0.16231*exp(-(temp(t)-27.18118)^2/109.03255))
return(larva)
}
data <- data.frame(t, larva.dev(t))
plot(t, larva.dev(t), "l")
plot(larv.df.total)
plot(larv.df.total$temp, larv.df.total$development_L.plus)
larv.df.total
plot(larv.df.total$temp, larv.df.total$development_L.plus)
t <- larv.df.total$temp
y <- larv.df.total$development_L.plus
plot(t, y)
plot(t, y, pch = 17)
lines(t, larva.dev(t))
larv.df.total
plot(larv.df.total$temp, larv.df.total$development_L.plus)
t <- larv.df.total$temp
y <- larv.df.total$development_L.plus
fit <- nls(y ~ a*exp(-(t-b)^2/c), data=larv.df.total, start=list(a = 109.03255, b = 27.18118, c = 0.16231))
fit <- nls(y ~ a*exp(-(t-b)^2/c), data=larv.df.total, start=list(a = 109.03255, b = 27.18118, c = 0.16231))
# Import packages
library(tidyverse)
library(dplyr)
library(chron)
library(ggplot2)
library(graphics)
fit <- nls(y ~ a*exp(-(t-b)^2/c), data=larv.df.total, start=list(a = 109.03255, b = 27.18118, c = 0.16231))
larv <- function(t, a, b, c)(return(a*exp(-(t-b)^2/c)))
larv <- function(t, a, b, c)(return(a*exp(-(t-b)^2/c)))
fit <- nls(y ~ larv(t, a, b, c), data=larv.df.total, start=list(a = 109.03255, b = 27.18118, c = 0.16231))
t <- larv.df.total$temp
t
y
length(t)
length(y)
larv(1, 2, 3, 4)
fit <- nls(y ~ larv(t, a, b, c), data=larv.df.total, start=list(a = 109.03255, b = 27.18118, c = 0.16231))
pacman::p_load(pacman, tidyverse, scales, chron, ggplot2, rio, fitdistrplus, bbmle)
fit <- nls(y ~ larv(t, a, b, c), data=larv.df.total, start=list(a = 109.03255, b = 27.18118, c = 0.16231))
larv.df.total
plot(larv.df.total$temp, larv.df.total$development_L.plus)
t <- larv.df.total$temp
y <- larv.df.total$development_L.plus
larv <- function(t, a, b, c)(return(a*exp(-(t-b)^2/c)))
fit <- nls(y ~ larv(t, a, b, c), data=larv.df.total, start=list(a = 109.03255, b = 27.18118, c = 0.16231))
rm(list = ls())
larv.df.total
larv.df.total
source("~/Documents/climate-and-mosquitoes/param-funct-fit/larvae_function_fit.data.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/param-funct-fit/larvae_function_fit.data.R", echo=TRUE)
larv.df.total
t <- larv.df.total$temp
y <- larv.df.total$development_L.plus
larv <- function(t, a, b, c)(return(a*exp(-(t-b)^2/c)))
fit <- nls(y ~ larv(t, a, b, c), data=larv.df.total, start=list(a = 109.03255, b = 27.18118, c = 0.16231))
fit <- nls(larv.df.total$development_L.plus ~ larv(t, a, b, c), data=larv.df.total, start=list(a = 109.03255, b = 27.18118, c = 0.16231))
fit <- nls(y ~ larv(t, a, b, c), data=larv.df.total, start=list(a = 109.03255, b = 27.18118, c = 0.16231))
larv.df.total
attach(larv.df.total)
t <- larv.df.total$temp
y <- larv.df.total$development_L.plus
larv <- function(t, a, b, c)(return(a*exp(-(t-b)^2/c)))
fit <- nls(y ~ larv(t, a, b, c), data=larv.df.total, start=list(a = 109.03255, b = 27.18118, c = 0.16231))
nls.model1 <- nls(development_L.plus ~ larv(t, a, b, c), data=larv.df.total, start=list(a = 100 , b = 27, c = 0.2))
larv.df.total
attach(larv.df.total)
data <- larv.df.total
attach(data)
data
plot(temp, development_L.plus)
fit <- nls(development_L.plus~a*exp(-(t-b)^2/c), data = data, start=list(a = 109, b = 27, c = 0.2))
x <- temp
m <- nls(development_L.plus ~ c*exp(-(x-b)^2/a), data = df, start = list(a = 100, b = 31, c=0.46))
names(lar)
# This function defines the relationship between temperature and genotrophic cycle
t <- seq(0, 50)
larva.dev <- function(t){
larva <- ifelse(t <= 10 | t >= 40, 0.01, 0.16231*exp(-(t-27.18118)^2/109.03255))
return(larva)
}
plot(t, y, pch = 17)
lines(t, larva.dev(t))
# This function defines the relationship between temperature and genotrophic cycle
t <- seq(0, 100)
larva.dev <- function(t){
larva <- ifelse(t <= 10 | t >= 40, 0.01, 0.16231*exp(-(t-27.18118)^2/109.03255))
return(larva)
}
plot(t, y, pch = 17)
lines(t, larva.dev(t))
# This function defines the relationship between temperature and genotrophic cycle
t <- seq(0, 100)
larva.dev <- function(t){
larva <- ifelse(t <= 10 | t >= 40, 0.01, 0.16231*exp(-(t-27.18118)^2/109.03255))
return(larva)
}
plot(t, y, pch = 17)
# This function defines the relationship between temperature and genotrophic cycle
t <- seq(0, 50)
larva.dev <- function(t){
larva <- ifelse(t <= 10 | t >= 40, 0.01, 0.16231*exp(-(t-27.18118)^2/109.03255))
return(larva)
}
plot(t, y, pch = 17)
lines(t, larva.dev(t))
plot(t, larva.dev(t))
source("~/Documents/climate-and-mosquitoes/param-funct-fit/pupa_function_fit.data.R", echo=TRUE)
m <- nls(y ~ c*exp(-(x-b)^2/a), data = pupa.df.total, start = list(a = 60, b = 27, c=0.6))
plot(x, y)
lines(x, predict(m))
coef(m)
pupa <- function(t){
p <- 0.5920232 *exp(-(x-39.9070020)^2/339.6702830)
return(p)
}
plot(x, y)
pupa <- function(x){
p <- 0.5920232 *exp(-(x-39.9070020)^2/339.6702830)
return(p)
}
lines(x, pupa(x))
# The function to be used to run the model is as follows:
t <- seq(0, 50)
pupa <- function(t){
p <- 0.5920232 *exp(-(t-39.9070020)^2/339.6702830)
return(p)
}
plot(t, pupa(t))
plot(t, pupa(t), "l")
plot(x, y)
lines(x, pupa(x))
plot(t, pupa(t), "l")
# The function to be used to run the model is as follows:
t <- seq(0, 50)
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))}
# The function to be used to run the model is as follows:
t <- seq(0, 50)
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))}
pupa <- function(t){
p <- 0.5920232 *exp(-(temp(t)-39.9070020)^2/339.6702830)
return(p)
}
plot(t, temp(t))
plot(t, pupa(t))
min(pupa(t))
plot(temp(t), pupa(t))
plot(temp(t), pupa(t), "l")
# The function to be used to run the model is as follows:
t <- seq(0, 100)
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))}
pupa <- function(t){
p <- 0.5920232 *exp(-(temp(t)-39.9070020)^2/339.6702830)
return(p)
}
plot(t, temp(t))
plot(t, pupa(t))
plot(temp(t), pupa(t), "l")
plot(t, pupa(t))
min(pupa(t))
# The function to be used to run the model is as follows:
t <- seq(0, 100)
# The function to be used to run the model is as follows:
t <- seq(0, 100)
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))}
pupa <- function(t){
p <- ifelse(temp(t) <= 10 | temp(t) >= 40, 0.003, 0.5920232 *exp(-(temp(t)-39.9070020)^2/339.6702830))
return(p)
}
plot(t, temp(t))
plot(t, pupa(t))
plot(temp(t), pupa(t), "l")
plot(t, pupa(t), "l")
plot(temp(t), pupa(t), "l")
pupa <- function(t){
p <- ifelse(temp(t) <= 10 | temp(t) >= 40, 0.03, 0.5920232 *exp(-(temp(t)-39.9070020)^2/339.6702830))
return(p)
}
plot(t, temp(t))
plot(t, pupa(t), "l")
plot(temp(t), pupa(t), "l")
plot(t, pupa(t), "l")
plot(temp(t), pupa(t), "l")
p <- ifelse(temp(t) <= 10 | temp(t) >= 40, 0.05, 0.5920232 *exp(-(temp(t)-39.9070020)^2/339.6702830))
return(p)
pupa <- function(t){
p <- ifelse(temp(t) <= 10 | temp(t) >= 40, 0.05, 0.5920232 *exp(-(temp(t)-39.9070020)^2/339.6702830))
return(p)
}
pupa <- function(t){
p <- ifelse(temp(t) <= 10 | temp(t) >= 40, 0.05, 0.5920232 *exp(-(temp(t)-39.9070020)^2/339.6702830))
return(p)
}
plot(t, temp(t))
plot(t, pupa(t), "l")
plot(temp(t), pupa(t), "l")
pupa <- function(t){
p <- ifelse(temp(t) <= 10 | temp(t) >= 40, 0.03, 0.5920232 *exp(-(temp(t)-39.9070020)^2/339.6702830))
return(p)
}
plot(t, temp(t))
plot(t, pupa(t), "l")
plot(temp(t), pupa(t), "l")
plot(x, y)
lines(x, pupa(x))
pupa <- function(x){
p <- 0.5920232 *exp(-(x-39.9070020)^2/339.6702830)
return(p)
}
plot(x, y)
lines(x, pupa(x))
pupa <- function(x){
p <- ifelse(x <= 10 | t >= 40, 0.03, 0.5920232 *exp(-(x-39.9070020)^2/339.6702830))
return(p)
}
pupa2 <- function(x){
p <- ifelse(x <= 10 | t >= 40, 0.03, 0.5920232 *exp(-(x-39.9070020)^2/339.6702830))
return(p)
}
plot(x, y)
lines(x, pupa2(x))
pupa <- function(x){
p <- 0.5920232 *exp(-(x-39.9070020)^2/339.6702830)
return(p)
}
plot(x, y)
lines(x, pupa(x))
pupa2 <- function(x){
p <- ifelse(x <= 10 | t >= 40, 0.03, 0.5920232 *exp(-(x-39.9070020)^2/339.6702830))
return(p)
}
lines(x, pupa2(x))
pupa2 <- function(x){
p <- ifelse(x <= 10 | x >= 40, 0.03, 0.5920232 *exp(-(x-39.9070020)^2/339.6702830))
return(p)
}
lines(x, pupa2(x))
plot(x, y)
lines(x, pupa(x))
pupa2 <- function(x){
p <- ifelse(x <= 10 | x >= 40, 0.03, 0.5920232 *exp(-(x-39.9070020)^2/339.6702830))
return(p)
}
lines(x, pupa2(x))
plot(x, pupa2(x))
plot(x, pupa2(x), "l")
plot(x, y)
lines(x, pupa(x))
pupa2 <- function(x){
p <- ifelse(x <= 10 | x >= 40, 0.03, 0.5920232 *exp(-(x-39.9070020)^2/339.6702830))
return(p)
}
lines(x, pupa2(x), col = "red")
plot(x, y)
pupa <- function(x){
p <- 0.5920232 *exp(-(x-39.9070020)^2/339.6702830)
return(p)
}
plot(x, y)
lines(x, pupa(x))
pupa2 <- function(x){
p <- ifelse(x <= 10 | x >= 40, 0.03, 0.5920232 *exp(-(x-39.9070020)^2/339.6702830))
return(p)
}
lines(x, pupa2(x), col = "red")
# Clear workspace
rm(list = ls())
dev.off()
# Load packages
pacman::p_load(pacman, GillespieSSA, ssar, ggplot2)
# Simulate the Hamdan and Kilicman model
#Initial parameters
params     <- c(q = 100, k = 10^10, mu_A = 0.03, mu_M = 0.1)
q <- params[1]
k <- params[2]
mu_A <- params[3]
mu_M <- params[4]
X          <- matrix(c(A = 100, M = 100), ncol = 2)
pfun       <- function(t, X, params){
#Value to return
matreturn  <- matrix(NA, nrow = length(t), ncol = 6)
# some time vector to play around with
# t <- seq(0, 365)
# Create temperature function
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
# Create rainfall function as a random event
#rain <- function(t){return(sample(seq(0, 20), t, replace = TRUE, prob = NULL))} # replace this with the estimated lognorm
#Create birth function
phi <- function(t){egg = ifelse(temp(t) <= 25, 0.1, 4.049403 *exp(-(temp(t)-75.098187)^2/1337.666814))
return(egg)
}
#Create birth function
delta_A <- function(t){ return(ifelse(temp(t) <= 23, 0.15, 0.0002441*temp(t)^2 + 0.0074035*temp(t) -0.0498189))} # just to experiment on adding the rain function
#Create death function
pi_A        <- function(t){ return(ifelse(temp(t)<=23, 0.05, 2.569e-04*temp(t)^2 -9.273e-03*temp(t) + 1.391e-01))}
#Create infectives function
pi_M   <- function(t){ return(ifelse(temp(t) <= 23, 0.05, 6.913e-04*temp(t)^2 -3.598e-02*temp(t) + 4.919e-01))}
#Estimate values
matreturn[,1] <- q*phi(t)*(1-X[,1]/k)*X[,2]
matreturn[,2] <- delta_A(t)*X[,1]
matreturn[,3] <- pi_A(t)*X[,1]
matreturn[,4] <- mu_A*X[,1]
matreturn[,5] <- pi_M(t)*X[,2]
matreturn[,6] <- mu_M*X[,2]
#Return
return(matreturn)
}
#Value to return
matreturn  <- matrix(NA, nrow = length(t), ncol = 6)
# Create temperature function
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
#Create birth function
ovi.func <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Create birth function
ovi <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Create birth function
ovi <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Create birth function
delta_A <- function(t){ return(0.3)} # just to experiment on adding the rain function
#Create death function
pi_A        <- function(t){ return(0.1)}
#Create infectives function
pi_M   <- function(t){ return(0.1)}
#Estimate values
matreturn[,1] <- q*phi(t)*(1-X[,1]/k)*X[,2]
matreturn[,2] <- delta_A(t)*X[,1]
matreturn[,3] <- pi_A(t)*X[,1]
#Estimate values
matreturn[,1] <- q*ovi(t)*(1-X[,1]/k)*X[,2]
# Create temperature function
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
#Create birth function
ovi <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Value to return
matreturn  <- matrix(NA, nrow = length(t), ncol = 6)
# Create temperature function
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
#Create birth function
ovi <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Create birth function
delta_A <- function(t){ return(0.3)} # just to experiment on adding the rain function
#Create death function
pi_A        <- function(t){ return(0.1)}
#Create infectives function
pi_M   <- function(t){ return(0.1)}
#Estimate values
matreturn[,1] <- q*ovi(t)*(1-X[,1]/k)*X[,2]
params     <- c(q = 100, k = 10^10, mu_A = 0.03, mu_M = 0.1)
q <- params[1]
k <- params[2]
mu_A <- params[3]
mu_M <- params[4]
X          <- matrix(c(A = 100, M = 100), ncol = 2)
pfun       <- function(t, X, params){
#Value to return
matreturn  <- matrix(NA, nrow = length(t), ncol = 6)
# some time vector to play around with
# t <- seq(0, 365)
# Create temperature function
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
# Create rainfall function as a random event
#rain <- function(t){return(sample(seq(0, 20), t, replace = TRUE, prob = NULL))} # replace this with the estimated lognorm
#Create birth function
ovi <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Create birth function
delta_A <- function(t){ return(0.3)} # just to experiment on adding the rain function
#Create death function
pi_A        <- function(t){ return(0.1)}
#Create infectives function
pi_M   <- function(t){ return(0.1)}
#Estimate values
matreturn[,1] <- q*ovi(t)*(1-X[,1]/k)*X[,2]
matreturn[,2] <- delta_A(t)*X[,1]
matreturn[,3] <- pi_A(t)*X[,1]
matreturn[,4] <- mu_A*X[,1]
matreturn[,5] <- pi_M(t)*X[,2]
matreturn[,6] <- mu_M*X[,2]
#Return
return(matreturn)
}
#Value to return
matreturn  <- matrix(NA, nrow = length(t), ncol = 6)
# Create temperature function
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
#Create birth function
ovi <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Create birth function
delta_A <- function(t){ return(0.3)} # just to experiment on adding the rain function
#Create death function
pi_A        <- function(t){ return(0.1)}
#Create infectives function
pi_M   <- function(t){ return(0.1)}
#Estimate values
matreturn[,1] <- q*ovi(t)*(1-X[,1]/k)*X[,2]
matreturn[,2] <- delta_A(t)*X[,1]
#Estimate values
matreturn[,1] <- q*ovi(t)*(1-X[,1]/k)*X[,2]
#Create birth function
phi <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Estimate values
matreturn[,1] <- q*phi(t)*(1-X[,1]/k)*X[,2]
#Create birth function
phi <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Create birth function
delta_A <- function(t){ return(0.3)} # just to experiment on adding the rain function
#Create death function
pi_A        <- function(t){ return(0.1)}
#Create infectives function
pi_M   <- function(t){ return(0.1)}
#Estimate values
matreturn[,1] <- q*phi(t)*(1-X[,1]/k)*X[,2]
matreturn[,2] <- delta_A(t)*X[,1]
matreturn[,3] <- pi_A(t)*X[,1]
matreturn[,4] <- mu_A*X[,1]
matreturn[,5] <- pi_M(t)*X[,2]
matreturn[,6] <- mu_M*X[,2]
#Return
return(matreturn)
pfun       <- function(t, X, params){
#Value to return
matreturn  <- matrix(NA, nrow = length(t), ncol = 6)
# some time vector to play around with
# t <- seq(0, 365)
# Create temperature function
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
# Create rainfall function as a random event
#rain <- function(t){return(sample(seq(0, 20), t, replace = TRUE, prob = NULL))} # replace this with the estimated lognorm
#Create birth function
phi <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Create birth function
delta_A <- function(t){ return(0.3)} # just to experiment on adding the rain function
#Create death function
pi_A        <- function(t){ return(0.1)}
#Create infectives function
pi_M   <- function(t){ return(0.1)}
#Estimate values
matreturn[,1] <- q*phi(t)*(1-X[,1]/k)*X[,2]
matreturn[,2] <- delta_A(t)*X[,1]
matreturn[,3] <- pi_A(t)*X[,1]
matreturn[,4] <- mu_A*X[,1]
matreturn[,5] <- pi_M(t)*X[,2]
matreturn[,6] <- mu_M*X[,2]
#Return
return(matreturn)
}
v          <- matrix(c(1,-1, -1, -1, 0, 0, 0, 1, 0, 0, -1, -1), nrow = 2, byrow = TRUE)
tmin       <- 0
tmax       <- 1
nsim       <- 2
simulation2 <- ssa(X, pfun, v, params, tmin, tmax, nsim = nsim, print.time = FALSE,
plot.sim = TRUE, maxiter = 50000, kthsave = 10, keep.file = TRUE,
fname = "sim2.txt")
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
# Clear workspace
rm(list = ls())
dev.off()
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
# Create temperature function
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
#Create birth function
phi <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Create birth function
delta_A <- function(t){ return(0.3)} # just to experiment on adding the rain function
#Create death function
pi_A        <- function(t){ return(0.1)}
#Create infectives function
pi_M   <- function(t){ return(0.1)}
#Estimate values
matreturn[,1] <- q*phi(t)*(1-X[,1]/k)*X[,2]
matreturn[,2] <- delta_A(t)*X[,1]
matreturn[,3] <- pi_A(t)*X[,1]
matreturn[,4] <- mu_A*X[,1]
matreturn[,5] <- pi_M(t)*X[,2]
matreturn[,6] <- mu_M*X[,2]
matreturn
